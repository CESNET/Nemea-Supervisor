#! /usr/bin/env python
# -*- coding: utf-8; -*-

"""Monitoring plugin to check that all libtrap inputs on all
configured Nemea modules are connected."""

__author__ = 'Ulrik Haugen <ulrik.haugen@liu.se>'
__copyright__ = 'Copyright 2017 Link√∂pings universitet'

ex_ok = 0
ex_warning = 1
ex_critical = 2
ex_unknown = 3


bindir="@bindir@"


def checkconnectedstatus(modulesinfo):
    """Examine _moduleinfo_. Return a tuple of lists of module names,
    connected, partially connected and unconnected."""
    connectedmodules = []
    unconnectedmodules = []
    partiallyconnectedmodules = []
    for modulename, moduleinfo in modulesinfo.iteritems():
        connected = 0
        unconnected = 0

        for input in moduleinfo['inputs']:
            if input['is-conn']:
                connected += 1
            else:
                unconnected += 1

        if connected and unconnected:
            partiallyconnectedmodules.append(modulename)
        elif unconnected:
            unconnectedmodules.append(modulename)
        elif connected:
            connectedmodules.append(modulename)

    return connectedmodules, partiallyconnectedmodules, unconnectedmodules


def getnemeamodulesinfo():
    """Call supervisor_cli for modules info and parse the returned
    json."""
    from subprocess import Popen, PIPE
    from json import loads
    from os.path import join

    supervisorproc = Popen([ join(bindir, "supervisor_cli"), "-i", ],
                           stdout=PIPE, stderr=PIPE)
    modulesinfojson, supervisorerr = supervisorproc.communicate()

    if supervisorerr.strip() or supervisorproc.returncode:
        raise EnvironmentError("Error retrieving modules info,"
                               " supervisor returned %d, stderr: \n%s"
                               % (supervisorproc.returncode,
                                  supervisorerr.strip()))

    return loads(modulesinfojson)


def checkmodulesconnected():
    """Retrieve and parse module infos. Return tuple of status code,
    status message and perfdata."""
    modulesinfo = getnemeamodulesinfo()
    (connectedmodules, partiallyconnectedmodules,
     unconnectedmodules) = checkconnectedstatus(modulesinfo)
    perfdata = '\n'.join([
        "connectedmodules=%d;;;0;" % len(connectedmodules),
        "partiallyconnectedmodules=%d;1;;0;" % len(partiallyconnectedmodules),
        "unconnectedmodules=%d;1;1;0;" % len(unconnectedmodules) ])

    if unconnectedmodules and partiallyconnectedmodules:
        return (ex_critical,
                "Critical: %s unconnected, %s partially connected %s"
                % (', '.join(unconnectedmodules),
                   ', '.join(paritallyconnectedmodules)),
                perfdata)
    elif unconnectedmodules:
        return (ex_critical,
                "Critical: %s unconnected"
                % ', '.join(unconnectedmodules),
                perfdata)
    elif partiallyconnectedmodules:
        return (ex_warning,
                "Warning: %s partially connected"
                % ', '.join(partiallyconnectedmodules),
                perfdata)
    else:
        return (ex_ok,
                "Ok: all modules connected",
                perfdata)


def main(programname, *programargs):
    """Dispatch to checkmodulesconnected."""
    statuscode, statusmessage, perfdata = checkmodulesconnected()
    print statusmessage
    print '|', perfdata
    return statuscode


if __name__ == '__main__':
    import sys
    sys.exit(main(*sys.argv))
