#!/usr/bin/python3
# -*- coding: utf-8; -*-

"""Monitoring plugin to check that all libtrap inputs on all
configured Nemea modules are connected."""

__author__ = 'Ulrik Haugen <ulrik.haugen@liu.se>'
__copyright__ = 'Copyright 2017 Link√∂pings universitet'

ex_ok = 0
ex_warning = 1
ex_critical = 2
ex_unknown = 3


bindir="@bindir@"


def checkconnectedstatus(modulesinfo):
    """Examine _moduleinfo_. Return a tuple of lists of module names,
    connected, partially connected and unconnected."""
    connectedmodules = []
    unconnectedmodules = []
    partiallyconnectedmodules = []
    for modulename, moduleinfo in modulesinfo.iteritems():
        connected = 0
        unconnected = 0

        for input in moduleinfo['inputs']:
            if input['is-conn']:
                connected += 1
            else:
                unconnected += 1

        if connected and unconnected:
            partiallyconnectedmodules.append(modulename)
        elif unconnected:
            unconnectedmodules.append(modulename)
        elif connected:
            connectedmodules.append(modulename)

    return connectedmodules, partiallyconnectedmodules, unconnectedmodules


def getnemeamodulesinfo():
    """Call supervisor_cli for modules info and parse the returned
    json."""
    from subprocess import Popen, PIPE
    from json import loads
    from os.path import join

    supervisorproc = Popen([ join(bindir, "supervisor_cli"), "-i", ],
                           stdout=PIPE, stderr=PIPE)
    modulesinfojson, supervisorerr = supervisorproc.communicate()

    if supervisorerr.strip() or supervisorproc.returncode:
        raise EnvironmentError("Error retrieving modules info,"
                               " supervisor returned %d, stderr: \n%s"
                               % (supervisorproc.returncode,
                                  supervisorerr.strip()))

    return loads(modulesinfojson)


def formatperfdata(label, value, unitofmeasure='',
                   warn='', crit='',
                   minimum='', maximum=''):
    """Return formatted performance data for a single label.

    Arguments warn, crit, minimum or maximum can be left out (for
    example, if the threshold is not defined or minimum and maximum do
    not apply).

    Arguments minimum and maximum are implied if unitofmeasure is '%'.

    Arguments value, minimum and maximum should be real numbers. Value
    may instead be a literal 'U' character to indicate that the value
    could not be determined.

    Arguments warn and crit are in a range format where a lone number
    'n' means outside {0 .. n}, 'n:' means outside {n .. inf}, '~:n'
    means outside {-inf .. n}, 'n:m' means outside {n .. m} and '@n:m'
    means inside {n .. m}.

    The supplied unitofmeasure is applied to value, warn, crit,
    minimum and maximum, use empty string for count e.g. processes
    (default), 's' for seconds (also ms, us), '%' for percentage, 'B'
    for bytes, 'c' for a continous counter (e.g. bytes received).
    """
    return "{}={}{};{};{};{};{}".format(
        label, value, unitofmeasure,
        warn, crit,
        minimum, maximum)


def checkmodulesconnected():
    """Retrieve and parse module infos. Return tuple of status code,
    status message and perfdata."""
    modulesinfo = getnemeamodulesinfo()
    (connectedmodules, partiallyconnectedmodules,
     unconnectedmodules) = checkconnectedstatus(modulesinfo)
    perfdata = '\n'.join([
        formatperfdata('connectedmodules',
                       len(connectedmodules),
                       minimum=0),
        formatperfdata('partiallyconnectedmodules',
                       len(partiallyconnectedmodules),
                       warn=1, minimum=0),
        formatperfdata('unconnectedmodules',
                       len(unconnectedmodules),
                       crit=1, minimum=0) ])

    if unconnectedmodules and partiallyconnectedmodules:
        return (ex_critical,
                "Critical: %s unconnected, %s partially connected"
                % (', '.join(unconnectedmodules),
                   ', '.join(partiallyconnectedmodules)),
                perfdata)
    elif unconnectedmodules:
        return (ex_critical,
                "Critical: %s unconnected"
                % ', '.join(unconnectedmodules),
                perfdata)
    elif partiallyconnectedmodules:
        return (ex_warning,
                "Warning: %s partially connected"
                % ', '.join(partiallyconnectedmodules),
                perfdata)
    else:
        return (ex_ok,
                "Ok: all modules connected",
                perfdata)


def main(programname, *programargs):
    """Dispatch to checkmodulesconnected."""
    statuscode, statusmessage, perfdata = checkmodulesconnected()
    print statusmessage
    print '|', perfdata
    return statuscode


if __name__ == '__main__':
    import sys
    sys.exit(main(*sys.argv))
