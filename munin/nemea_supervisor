#!/usr/bin/python
# \file nemea_supervisor
# \brief Export script for the Munin system to translate date from supervisor.
# \author Tomas Cejka <cejkat@cesnet.cz>
# \author Marek Svepes <svepemar@fit.cvut.cz>
# \date 2014
# \date 2015
#
# Copyright (C) 2014-2015 CESNET
#
# LICENSE TERMS
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of the Company nor the names of its contributors
#    may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# ALTERNATIVELY, provided that this notice is retained in full, this
# product may be distributed under the terms of the GNU General Public
# License (GPL) version 2 or later, in which case the provisions
# of the GPL apply INSTEAD OF those given above.
#
# This software is provided ``as is'', and any express or implied
# warranties, including, but not limited to, the implied warranties of
# merchantability and fitness for a particular purpose are disclaimed.
# In no event shall the company or contributors be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.
#
# set to false to call supervisor_cli to get data

import logging
import os
import time
import signal
import subprocess

LOG_FILENAME = '/tmp/nemea_supervisor_munin.log'
#LOG_LEVEL = logging.DEBUG
LOG_LEVEL = logging.ERROR

# test set to True disables reading new current data
#test = True
test = False

# path to supervisor socket
supervisor_socket = "/var/run/nemea-supervisor.sock"

# temporary file with downloaded data
data_temp_file = "/tmp/munin_nemea_data.txt"

# munin interval, typically 5mins (-5 seconds tolerance)
munin_interval = 5*60-5

# path to supervisor_cli
supervisor_cli = "/usr/bin/nemea/supervisor_cli"

# labels of counters in graphs
labels = {
	"in": ["received messages"],
	"out": ["sent messages", "sent buffers", "autoflush"],
	"cpu": ["kernel mode", "user mode"],
	"mem": ["virtual memory"],
}

# data types of counters in graphs
datatypes = {
	"in": ["DERIVE"],
	"out": ["DERIVE", "DERIVE", "DERIVE"],
	"cpu": ["GAUGE", "GAUGE"],
	"mem": ["GAUGE"],
}

# vertical axis labels
vlabels = {
	"in": "count",
	"out": "count",
	"cpu": "%",
	"mem": "kB",
}

# graph titles
graph_title = {
	"in": "input IFC",
	"out": "output IFC",
	"cpu": "CPU usage",
	"mem": "Memory usage",
}

#==============================
# end of configuration        #
#==============================
logging.basicConfig(filename=LOG_FILENAME,
		level=LOG_LEVEL,
		format='%(asctime)s %(levelname)s %(message)s',
		filemod='a')
child_pid = -1

def handler_function(signum, stackframe):
	global child_pid
	try:
		os.unlink(data_temp_file)
	except:
		pass
	if child_pid != -1:
		os.kill(child_pid, signal.SIGTERM)
	logging.error("Timouted... Exiting.")
	exit(1)

#Sets an handler function, you can comment it if you don't need it.
signal.signal(signal.SIGALRM,handler_function)

#Sets an alarm in 10 seconds
#If uncaught will terminate your process.
signal.alarm(2)

# get data
if test:
	data = """MAIN_Anonymizer,in,0,-792698113
MAIN_Anonymizer,out,0,-792698114,74068444,13382
MAIN_Anonymizer,out,1,698114,74068444,13382
MAIN_ipv6stats,in,0,-170390356
MAIN_dns_amplification,in,0,-1398852332
MAIN_dns_amplification,out,0,125580,72686,2774847
MAIN_Anonymizer,cpu,0,3
MAIN_ipv6stats,cpu,0,0
MAIN_dns_amplification,cpu,0,24
MAIN_dns_amp_report_handler,cpu,0,0
MAIN_Anonymizer,mem,110000
MAIN_ipv6stats,mem,220000
MAIN_dns_amplification,mem,330000
MAIN_dns_amp_report_handler,mem,440000
"""
else:
	current_time = time.time()
	last_time = 0
	try:
		last_time = os.stat(data_temp_file).st_mtime
	except:
		logging.debug("{} not found or cannot read info.".format(data_temp_file))
		pass
	if (current_time - last_time) > munin_interval:
		logging.debug("Download new data.")
		sup = ""
		try:
			sup = subprocess.Popen([supervisor_cli, "-x", "-s", supervisor_socket], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			child_pid = sup.pid
			(data, errdata) = sup.communicate()
			sup.wait()
			if "ERROR" in data or "WARNING" in data:
				logging.error(data)
				exit(1)
			if errdata:
				logging.error(errdata)
				exit(1)
			with open(data_temp_file, "w") as f:
				f.write(data)
		except Exception as e:
			logging.critical("Download failed. ({})".format(e))
			if child_pid != -1:
				os.kill(child_pid, signal.SIGTERM)
			exit(1)
	else:
		logging.debug("Use existing data.")
		data = ""
		with open(data_temp_file, "r") as f:
			for line in f.readlines():
				data = data + line



def parseData(data):
	modules = {}
	counters = []
	try:
		for line in data.split('\n'):
			if not line:
				continue
			parsed_line = line.split(',')
			counters.append(parsed_line)
			if parsed_line[0] not in modules:
				modules[parsed_line[0]] = {}
			if parsed_line[1] not in modules[parsed_line[0]]:
				modules[parsed_line[0]][parsed_line[1]] = []
			modules[parsed_line[0]][parsed_line[1]].append(parsed_line[2:])
	except Exception as e:
		logging.error("Cannot parse data. ({})".format(e))
	return modules

def genModuleGraph(name, data):
	for i in "cpu", "in", "out", "mem":
		if i in data:
			for graphid in range(0, data[i].__len__()):
				print("multigraph {}_{}{}".format(name, i, graphid))
				if i == "cpu":
					print('graph_title {} {}'.format(name, graph_title[i]))
				else:
					print('graph_title {} {} {}'.format(name, graph_title[i], graphid))
				print('graph_vlabel {}'.format(vlabels[i]))
				print("graph_category nemea_supervisor")
				graph = data[i][graphid]
				if i in ["cpu", "mem"]:
					r = range(0, graph.__len__())
				else:
					r = range(0, graph.__len__()-1)
				for statid in r:
					print("stat{}.label {}".format(statid, labels[i][statid]))
					print("stat{}.type {}".format(statid, datatypes[i][statid]))
					if i == "cpu":
						print("stat{}.min 0".format(statid))
						print("stat{}.max 100".format(statid))

				print("")


def getTotalCPUConfiguration(modules):
	sel_modules = []
	for i in modules:
		if "cpu" in modules[i]:
			sel_modules.append(i)
	if sel_modules:
		print("multigraph nemea_modules_cpu")
		print("graph_title CPU usage of Nemea modules")
		print("graph_category nemea_supervisor")
		print('graph_vlabel {}'.format(vlabels["cpu"]))
		print("graph_info User CPU usage of all running and monitored modules.")
		for i in sel_modules:
			print("{}.label {}".format(i, i.replace("_", " ")))
			print("{}.min 0".format(i))
			print("{}.type GAUGE".format(i))
			print("{}.draw AREASTACK".format(i))

def getTotalCPUValues(modules):
	sel_modules = []
	for i in modules:
		if "cpu" in modules[i]:
			sel_modules.append(i)
	if sel_modules:
		print("multigraph nemea_modules_cpu")
		for i in sel_modules:
			print("{}.value {}".format(i, modules[i]["cpu"][0][1]))

def getTotalMEMConfiguration(modules):
	sel_modules = []
	for i in modules:
		if "mem" in modules[i]:
			sel_modules.append(i)
	if sel_modules:
		print("multigraph nemea_modules_mem")
		print("graph_title Virtual memory usage of Nemea modules")
		print("graph_category nemea_supervisor")
		print('graph_vlabel {}'.format(vlabels["mem"]))
		print("graph_info Virtual memory usage of all running and monitored modules.")
		for i in sel_modules:
			print("{}.label {}".format(i, i.replace("_", " ")))
			print("{}.min 0".format(i))
			print("{}.type GAUGE".format(i))
			print("{}.draw AREASTACK".format(i))

def getTotalMEMValues(modules):
	sel_modules = []
	for i in modules:
		if "mem" in modules[i]:
			sel_modules.append(i)
	if sel_modules:
		print("multigraph nemea_modules_mem")
		for i in sel_modules:
			print("{}.value {}".format(i, modules[i]["mem"][0][0]))

def getConfiguration(modules):
	getTotalCPUConfiguration(modules)
	getTotalMEMConfiguration(modules)
	for module in modules:
		genModuleGraph(module, modules[module])

def getValues(modules):
	getTotalCPUValues(modules)
	getTotalMEMValues(modules)
	for module in modules:
		# iterate over Nemea modules
		for cat in modules[module]:
			# each Nemea module supplies some graphs, iterate over graphs
			graphs = modules[module][cat]
			for graphid in range(0, graphs.__len__()):
				graph = graphs[graphid]
				print("multigraph {}_{}{}".format(module, cat, graphid))
				if cat == "cpu":
					r = range(0, graph.__len__())
					for val in r:
						print("stat{}.value {}".format(val, abs(int(graph[val]))))
				elif cat == "mem":
					r = range(0, graph.__len__())
					for val in r:
						print("stat{}.value {}".format(val, abs(int(graph[val]))))
				else:
					r = range(1, graph.__len__())
					for val in r:
						print("stat{}.value {}".format(val-1, abs(int(graph[val]))))

import sys
if not data:
	logging.error("Have no data.")
	os.unlink(data_temp_file)
	exit(1)

modules = parseData(data)
if len(sys.argv) == 2 and sys.argv[1] == "autoconf":
	print("yes")
elif len(sys.argv) == 2 and sys.argv[1] == "config":
	getConfiguration(modules)
elif len(sys.argv) == 2 and sys.argv[1] == "suggest":
	print("")
else:
	#values
	getValues(modules)

